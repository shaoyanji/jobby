version: '3'

vars:
  TEMP_DIR: ./tmp
  OUTPUT_DIR: ./output
  TEMPLATE_DIR: ./src
  TEMPLATE_LATEX: ./src/letter.latex
  ENC_HEADER_LETTER_YAML: ./src/letter.enc.yaml
  HEADER_LETTER_YAML: ./tmp/letter.yaml
  LETTER_MD: ./src/letter.md
  ENC_HEADER_RESUME_YAML: ./src/resume.enc.yaml
  HEADER_RESUME_YAML: ./tmp/resume.yaml
  RESUME_MD: ./src/resume.md
  CSS_FILE: ./src/resume-stylesheet.css
  BIN: ./src/bin
  SHRINK_PDF: ./src/bin/shrinkpdf.sh
  FILE_SIZE: stat -c%s
menu:
  ui:
    - generateletter
    - generatecv
    - edit
    - clean
    - git-clean-push
    - exit
  edit:
    - back-to-task 
    - edit-letter
    - edit-resume
    - edit-secrets
    - exit
tasks:
  default:
    cmds: 
      - task $(cat Taskfile.yml | yq .menu.ui.[] | gum choose)
    silent: true
  generateletter:
    cmds:
      - echo "Generating letter"
      - mkdir -p {{.TEMP_DIR}}
      - echo "Decrypting secrets"
      - sops -d {{.ENC_HEADER_LETTER_YAML}} > {{.HEADER_LETTER_YAML}}
      - echo "---" > {{.TEMP_DIR}}/letter.md
      - cat {{.HEADER_LETTER_YAML}} >> {{.TEMP_DIR}}/letter.md
      - echo "..." >> {{.TEMP_DIR}}/letter.md
      - cat {{.LETTER_MD}} >> {{.TEMP_DIR}}/letter.md
      - echo "Converting Markdown to PDF"
      - pandoc --template={{.TEMPLATE_LATEX}} {{.TEMP_DIR}}/letter.md -f markdown -t pdf -o {{.TEMP_DIR}}/letter.pdf
      - echo "Compressing PDF...Current size is $({{.FILE_SIZE}} {{.TEMP_DIR}}/letter.pdf) bytes"
      - mkdir -p {{.OUTPUT_DIR}}
      - ./{{.SHRINK_PDF}} {{.TEMP_DIR}}/letter.pdf > {{.TEMP_DIR}}/letter.pdf
      - pdfcpu optimize {{.OUTPUT_DIR}}/letter.pdf
      - echo "Cover Letter Generated at {{.OUTPUT_DIR}}/letter.pdf total size is $({{.FILE_SIZE}} {{.OUTPUT_DIR}}/letter.pdf) bytes"
    silent: true
  generatecv:
    cmds:
      - echo "Generating CV"
      - mkdir -p {{.TEMP_DIR}}
      - echo "Decrypting secrets"
      - sops -d {{.ENC_HEADER_RESUME_YAML}} > {{.HEADER_RESUME_YAML}}
      - echo "---" > {{.TEMP_DIR}}/resume.md
      - cat {{.HEADER_RESUME_YAML}} >> {{.TEMP_DIR}}/resume.md
      - echo "---" >> {{.TEMP_DIR}}/resume.md
      - cat {{.RESUME_MD}} >> {{.TEMP_DIR}}/resume.md
      - echo "Converting Markdown to PDF"
      - pandoc {{.TEMP_DIR}}/resume.md -f markdown -t pdf --pdf-engine=wkhtmltopdf -c {{.CSS_FILE}} -s -o {{.TEMP_DIR}}/resume.pdf
      - echo "Compressing PDF...Current size is $({{.FILE_SIZE}} {{.TEMP_DIR}}/resume.pdf) bytes"
      - mkdir -p {{.OUTPUT_DIR}}
      - ./{{.SHRINK_PDF}} {{.TEMP_DIR}}/resume.pdf > {{.OUTPUT_DIR}}/resume.pdf
      - pdfcpu optimize {{.OUTPUT_DIR}}/resume.pdf
      - echo "CV Generated at {{.OUTPUT_DIR}}/resume.pdf total size is $({{.FILE_SIZE}} {{.OUTPUT_DIR}}/resume.pdf) bytes"
    silent: true
  compress-assets:
    vars:
      PDF_NAME:
        sh: find src -type f -name '*.pdf'
    cmds:
      - echo "Compressing assets"
      - mkdir -p {{.OUTPUT_DIR}}/src/assets
      - mkdir -p {{.TEMP_DIR}}/src/assets
      - cp -r src/assets/* {{.TEMP_DIR}}/src/assets
      - for: { var: PDF_NAME }
        cmd: ./{{.SHRINK_PDF}} {{.TEMP_DIR}}/{{.ITEM}}  {{.OUTPUT_DIR}}/{{.ITEM}}
        # cmd: pdfcpu optimize '{{.OUTPUT_DIR}}/{{.ITEM}}'
      - echo "Assets Compressed at {{.OUTPUT_DIR}}/src/assets"
    silent: true
  back-to-task:
    cmds:
      - task
  edit:
    cmds:
      - task $(cat Taskfile.yml | yq .menu.edit.[] | gum choose)
  edit-letter:
    cmds:
      - $EDITOR {{.LETTER_MD}}
    silent: true
  edit-resume:
    cmds:
      - $EDITOR {{.RESUME_MD}}
    silent: true
  edit-secrets:
    cmds:
      - sops edit {{.ENC_HEADER_LETTER_YAML}}
      - sops edit {{.ENC_HEADER_RESUME_YAML}}
    silent: true
  clean:
    cmds:
      - rm -rf {{.TEMP_DIR}} && mkdir -p {{.TEMP_DIR}}
  git-clean-push:
    cmds:
      - git clean -fdx
      - git add .
      - 'git commit -m "chore: cleaning repo"'
      - sudo git push
  exit:
    cmds:
      - exit
