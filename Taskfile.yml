version: '3'

vars:
  TEMP_DIR: ./tmp
  OUTPUT_DIR: ./output
  TEMPLATE_DIR: ./src
  TEMPLATE_LATEX: ./src/letter.latex
  ENC_HEADER_LETTER_YAML: ./src/letter.enc.yaml
  HEADER_LETTER_YAML: ./tmp/letter.yaml
  LETTER_MD: ./src/letter.md
  ENC_HEADER_RESUME_YAML: ./src/resume.enc.yaml
  HEADER_RESUME_YAML: ./tmp/resume.yaml
  RESUME_MD: ./src/resume.md
  RESUME_DE_MD: ./src/resume-de.md
  CSS_FILE: ./src/resume-stylesheet.css
  BIN: ./src/bin
  SHRINK_PDF: ./src/bin/shrinkpdf.sh
  FILE_SIZE: stat -c%s
  PROFILE: ./src/assets/profile.jpg
  SIGNATURE: ./src/assets/signature.png
menu:
  ui:
    - tgpt2
    - pbpaste-letter
    - generateletter
    - generatecv
    - make-pdf-map
    - compress-assets
    - edit
    - clean
    - update-sops
    - git-clean-push
    - exit
  edit:
    - back-to-task 
    - edit-letter
    - edit-resume
    - edit-letter-secrets
    - edit-resume-secrets
    - exit
tasks:
  default:
    cmds: 
      - task $(cat Taskfile.yml | yq .menu.[].[] | gum choose)
#      - task $(cat Taskfile.yml | yq '.tasks | keys | .[]' | fzf --height 50%)
    silent: true
  update-date:
    cmds:
      #    - nu {{.BIN}}/update-date.nu
  make-pdf-map:
    cmds:
      - mkdir -p {{.TEMP_DIR}}
      - sops -d {{.TEMPLATE_DIR}}/resume-map.enc.yaml > {{.TEMP_DIR}}/resume-map.yaml
      - nu {{.BIN}}/resume-map.nu
      - ({{.BIN}}/resume-map.nu && viu {{.PROFILE}} -w 20 -x 260 -ay 8 && viu {{.SIGNATURE}} -w 40 -x 250 -ay 65)
      #- nu {{.BIN}}/resume-map.nu | freeze -o {{.OUTPUT_DIR}}/resume-map.png --language text
      #- magick {{.OUTPUT_DIR}}/resume-map.png {{.OUTPUT_DIR}}/resume-map.pdf
      #- pdfcpu optimize {{.OUTPUT_DIR}}/resume-map.pdf
      #- mupdf {{.OUTPUT_DIR}}/resume-map.pdf
  make-pdf-map-de:
    cmds:
      - mkdir -p {{.TEMP_DIR}}
      - sops -d {{.TEMPLATE_DIR}}/resume-map-de.enc.yaml > {{.TEMP_DIR}}/resume-map-de.yaml
      #- nu {{.BIN}}/resume-map-de.nu
      #- ({{.BIN}}/resume-map-de.nu && viu {{.PROFILE}} -w 20 -x 260 -ay 8 && viu {{.SIGNATURE}} -w 40 -x 250 -ay 65)
      - nu {{.BIN}}/resume-map-de.nu | freeze -o {{.OUTPUT_DIR}}/resume-map-de.png --language text
      - magick {{.OUTPUT_DIR}}/resume-map-de.png {{.OUTPUT_DIR}}/resume-map-de.pdf
      - pdfcpu optimize {{.OUTPUT_DIR}}/resume-map-de.pdf
      - mupdf {{.OUTPUT_DIR}}/resume-map-de.pdf
  tgpt2:
    cmds:
      - mkdir -p {{.TEMP_DIR}}
      - sops edit {{.TEMPLATE_DIR}}/letter.enc.yaml
      - cp ./src/template.yaml {{.TEMP_DIR}}/template.yaml
      - task update-date
      - $EDITOR {{.TEMP_DIR}}/template.yaml
      - yq .prompt {{.TEMP_DIR}}/template.yaml | tgpt -q > {{.LETTER_MD}}
      - task edit-letter # one go through the edit cycle
      - task generateletter

  tgpt:
    cmds:
      - mkdir -p {{.TEMP_DIR}}
      - $EDITOR {{.TEMP_DIR}}/tgpt.md
      - cat {{.TEMP_DIR}}/tgpt.md | tgpt
  pbpaste-letter:
    cmds:
      - pbpaste > {{.LETTER_MD}}
      - task edit-letter
      - task edit-letter-secrets # make a form to sops set the three edit values
      - task generateletter
  generateletter:
    cmds:
      - echo "Generating letter"
      - mkdir -p {{.TEMP_DIR}}
      - echo "Decrypting secrets"
      - task update-date
      - sops -d {{.ENC_HEADER_LETTER_YAML}} > {{.HEADER_LETTER_YAML}}
      - echo "---" > {{.TEMP_DIR}}/letter.md
      - cat {{.HEADER_LETTER_YAML}} >> {{.TEMP_DIR}}/letter.md
      - echo "..." >> {{.TEMP_DIR}}/letter.md
      - cat {{.LETTER_MD}} >> {{.TEMP_DIR}}/letter.md
      - echo "Converting Markdown to PDF"
      - pandoc --template={{.TEMPLATE_LATEX}} {{.TEMP_DIR}}/letter.md -f markdown -t pdf -o {{.TEMP_DIR}}/letter.pdf
      - echo "Compressing PDF...Current size is $({{.FILE_SIZE}} {{.TEMP_DIR}}/letter.pdf) bytes"
      - mkdir -p {{.OUTPUT_DIR}}
      - ./{{.SHRINK_PDF}} {{.TEMP_DIR}}/letter.pdf > {{.OUTPUT_DIR}}/letter.pdf
      - pdfcpu optimize {{.OUTPUT_DIR}}/letter.pdf
      - echo "Cover Letter Generated at {{.OUTPUT_DIR}}/letter.pdf total size is $({{.FILE_SIZE}} {{.OUTPUT_DIR}}/letter.pdf) bytes"
      #      - mupdf {{.OUTPUT_DIR}}/letter.pdf
    silent: true
  generatecv:
    cmds:
      - echo "Generating CV"
      - mkdir -p {{.TEMP_DIR}}
      - echo "Decrypting secrets"
      - sops -d {{.ENC_HEADER_RESUME_YAML}} > {{.HEADER_RESUME_YAML}}
      - echo "---" > {{.TEMP_DIR}}/resume.md
      - cat {{.HEADER_RESUME_YAML}} >> {{.TEMP_DIR}}/resume.md
      - echo "---" >> {{.TEMP_DIR}}/resume.md
      - cat {{.RESUME_MD}} >> {{.TEMP_DIR}}/resume.md
      - echo "Converting Markdown to PDF"
      - pandoc {{.TEMP_DIR}}/resume.md -f markdown -t pdf --pdf-engine=wkhtmltopdf -c {{.CSS_FILE}} -s -o {{.TEMP_DIR}}/resume.pdf
      - echo "Compressing PDF...Current size is $({{.FILE_SIZE}} {{.TEMP_DIR}}/resume.pdf) bytes"
      - mkdir -p {{.OUTPUT_DIR}}
      - ./{{.SHRINK_PDF}} {{.TEMP_DIR}}/resume.pdf > {{.OUTPUT_DIR}}/resume.pdf
      - pdfcpu optimize {{.OUTPUT_DIR}}/resume.pdf
      - echo "CV Generated at {{.OUTPUT_DIR}}/resume.pdf total size is $({{.FILE_SIZE}} {{.OUTPUT_DIR}}/resume.pdf) bytes"
      #      - mupdf {{.OUTPUT_DIR}}/resume.pdf
    silent: true
  generatecv-de:
    cmds:
      - echo "Generating CV"
      - mkdir -p {{.TEMP_DIR}}
      - echo "Decrypting secrets"
      - sops -d {{.ENC_HEADER_RESUME_YAML}} > {{.HEADER_RESUME_YAML}}
      - echo "---" > {{.TEMP_DIR}}/resume-de.md
      - cat {{.HEADER_RESUME_YAML}} >> {{.TEMP_DIR}}/resume-de.md
      - echo "---" >> {{.TEMP_DIR}}/resume-de.md
      - cat {{.RESUME_DE_MD}} >> {{.TEMP_DIR}}/resume-de.md
      - echo "Converting Markdown to PDF"
      - pandoc {{.TEMP_DIR}}/resume-de.md -f markdown -t pdf --pdf-engine=wkhtmltopdf -c {{.CSS_FILE}} -s -o {{.TEMP_DIR}}/resume-de.pdf
      - echo "Compressing PDF...Current size is $({{.FILE_SIZE}} {{.TEMP_DIR}}/resume-de.pdf) bytes"
      - mkdir -p {{.OUTPUT_DIR}}
      - ./{{.SHRINK_PDF}} {{.TEMP_DIR}}/resume-de.pdf > {{.OUTPUT_DIR}}/resume-de.pdf
      - pdfcpu optimize {{.OUTPUT_DIR}}/resume-de.pdf
      - echo "CV Generated at {{.OUTPUT_DIR}}/resume-de.pdf total size is $({{.FILE_SIZE}} {{.OUTPUT_DIR}}/resume-de.pdf) bytes"
      #      - mupdf {{.OUTPUT_DIR}}/resume.pdf
    silent: true

  compress-assets:
    cmds:
      - echo "Compressing assets"
      - mkdir -p {{.OUTPUT_DIR}}/src/assets
      - mkdir -p {{.TEMP_DIR}}/src/assets
      - cp -r src/assets/* {{.TEMP_DIR}}/src/assets
      - task compress-pdf
      - task optimize-pdf
      - echo "Assets Compressed at {{.OUTPUT_DIR}}/src/assets"
  compress-pdf:
    vars:
      PDF_NAME:
        sh: find src -type f -name '*.pdf'
    cmds:
      - for: { var: PDF_NAME }
        cmd: ./{{.SHRINK_PDF}} {{.TEMP_DIR}}/{{.ITEM}}  {{.OUTPUT_DIR}}/{{.ITEM}}
  optimize-pdf:
    vars:
      PDF_NAME:
        sh: find src -type f -name '*.pdf'
    cmds:
      - for: { var: PDF_NAME }
        cmd: pdfcpu optimize '{{.OUTPUT_DIR}}/{{.ITEM}}'
  back-to-task:
    cmds:
      - task
  edit:
    cmds:
      - task $(cat Taskfile.yml | yq .menu.edit.[] | gum choose)
  edit-letter:
    cmds:
      - $EDITOR {{.LETTER_MD}}
    silent: true
  edit-resume:
    cmds:
      - $EDITOR {{.RESUME_MD}}
    silent: true
  edit-letter-secrets:
    cmds:
      - sops edit {{.ENC_HEADER_LETTER_YAML}}
    silent: true
  edit-resume-secrets:
    cmds:
      - sops edit {{.ENC_HEADER_RESUME_YAML}}
    silent: true
  clean:
    cmds:
      - rm -rf {{.TEMP_DIR}} && mkdir -p {{.TEMP_DIR}}
  update-sops:
    cmds:
      - sops updatekeys {{.TEMPLATE_DIR}}/*.enc.yaml
  git-clean-push:
    cmds:
      - git add .
      - 'git commit -m "chore: cleaning repo"'
      - git push
  exit:
    cmds:
      - exit
